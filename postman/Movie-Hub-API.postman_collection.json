{
  "info": {
    "_postman_id": "movie-hub-api-collection",
    "name": "Movie Hub API",
    "description": "Complete API collection for the Movie Hub application with TMDB integration. This collection includes authentication, movie management, ratings, and watchlist endpoints.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "movie-hub"
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has user data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    pm.expect(jsonData.user).to.have.property('id');",
                  "    pm.expect(jsonData.user).to.have.property('email');",
                  "    pm.expect(jsonData.user).to.have.property('username');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{user_email}}\",\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\",\n  \"firstName\": \"{{first_name}}\",\n  \"lastName\": \"{{last_name}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["auth", "register"]
            },
            "description": "Register a new user account. Returns user information upon successful registration."
          },
          "response": [
            {
              "name": "Successful Registration",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"username\": \"johndoe\",\n  \"password\": \"password123\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/auth/register",
                  "host": ["{{base_url}}"],
                  "path": ["auth", "register"]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"message\": \"User registered successfully\",\n  \"user\": {\n    \"id\": 1,\n    \"email\": \"john.doe@example.com\",\n    \"username\": \"johndoe\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"createdAt\": \"2024-01-20T10:30:00.000Z\"\n  }\n}"
            }
          ]
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has access token\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('access_token');",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    ",
                  "    // Store the token for other requests",
                  "    pm.environment.set('auth_token', jsonData.access_token);",
                  "    pm.environment.set('user_id', jsonData.user.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{user_email}}\",\n  \"password\": \"{{password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            },
            "description": "Authenticate user and receive JWT token. The token is automatically stored in environment variables for use in other requests."
          },
          "response": [
            {
              "name": "Successful Login",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"password123\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/auth/login",
                  "host": ["{{base_url}}"],
                  "path": ["auth", "login"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"user\": {\n    \"id\": 1,\n    \"email\": \"john.doe@example.com\",\n    \"username\": \"johndoe\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\"\n  }\n}"
            }
          ]
        }
      ],
      "description": "User authentication endpoints for registration and login."
    },
    {
      "name": "Movies",
      "item": [
        {
          "name": "Get Movies (Paginated)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has movies data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData).to.have.property('meta');",
                  "    pm.expect(jsonData.meta).to.have.property('total');",
                  "    pm.expect(jsonData.meta).to.have.property('page');",
                  "    pm.expect(jsonData.meta).to.have.property('limit');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/movies?page={{page}}&limit={{limit}}&search={{search_term}}&genres={{genre_ids}}&sortBy={{sort_by}}&sortOrder={{sort_order}}",
              "host": ["{{base_url}}"],
              "path": ["movies"],
              "query": [
                {
                  "key": "page",
                  "value": "{{page}}",
                  "description": "Page number (default: 1)"
                },
                {
                  "key": "limit",
                  "value": "{{limit}}",
                  "description": "Items per page (default: 10, max: 100)"
                },
                {
                  "key": "search",
                  "value": "{{search_term}}",
                  "description": "Search by movie title"
                },
                {
                  "key": "genres",
                  "value": "{{genre_ids}}",
                  "description": "Comma-separated genre IDs (e.g., 28,12,16)"
                },
                {
                  "key": "sortBy",
                  "value": "{{sort_by}}",
                  "description": "Sort field (title, releaseDate, popularity, voteAverage)"
                },
                {
                  "key": "sortOrder",
                  "value": "{{sort_order}}",
                  "description": "Sort direction (ASC, DESC)"
                },
                {
                  "key": "minRating",
                  "value": "{{min_rating}}",
                  "description": "Minimum vote average (0-10)",
                  "disabled": true
                },
                {
                  "key": "maxRating",
                  "value": "{{max_rating}}",
                  "description": "Maximum vote average (0-10)",
                  "disabled": true
                },
                {
                  "key": "year",
                  "value": "{{release_year}}",
                  "description": "Release year",
                  "disabled": true
                },
                {
                  "key": "language",
                  "value": "{{language}}",
                  "description": "Original language code",
                  "disabled": true
                }
              ]
            },
            "description": "Retrieve movies with optional filtering, searching, and sorting. This is a public endpoint that doesn't require authentication."
          },
          "response": [
            {
              "name": "Movies List Success",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/movies?page=1&limit=10&search=batman",
                  "host": ["{{base_url}}"],
                  "path": ["movies"],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "search",
                      "value": "batman"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"tmdbId\": 155,\n      \"title\": \"The Dark Knight\",\n      \"overview\": \"Batman raises the stakes in his war on crime...\",\n      \"posterPath\": \"/qJ2tW6WMUDux911r6m7haRef0WH.jpg\",\n      \"backdropPath\": \"/hqkIcbrOHL86UncnHIsHVcVmzue.jpg\",\n      \"releaseDate\": \"2008-07-18\",\n      \"voteAverage\": 8.5,\n      \"voteCount\": 32000,\n      \"popularity\": 98.5,\n      \"originalLanguage\": \"en\",\n      \"runtime\": 152,\n      \"budget\": 185000000,\n      \"revenue\": 1004934033,\n      \"genres\": [\n        {\n          \"id\": 1,\n          \"tmdbId\": 28,\n          \"name\": \"Action\"\n        }\n      ],\n      \"averageRating\": 8.7,\n      \"totalRatings\": 150\n    }\n  ],\n  \"meta\": {\n    \"total\": 500,\n    \"page\": 1,\n    \"limit\": 10,\n    \"totalPages\": 50\n  }\n}"
            }
          ]
        },
        {
          "name": "Get Movie by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response has movie data\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('id');",
                  "        pm.expect(jsonData).to.have.property('title');",
                  "        pm.expect(jsonData).to.have.property('genres');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/movies/{{movie_id}}",
              "host": ["{{base_url}}"],
              "path": ["movies", "{{movie_id}}"]
            },
            "description": "Retrieve a specific movie by its ID. This endpoint may require authentication depending on your configuration."
          },
          "response": [
            {
              "name": "Movie Details Success",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/movies/1",
                  "host": ["{{base_url}}"],
                  "path": ["movies", "1"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"id\": 1,\n  \"tmdbId\": 155,\n  \"title\": \"The Dark Knight\",\n  \"overview\": \"Batman raises the stakes in his war on crime...\",\n  \"posterPath\": \"/qJ2tW6WMUDux911r6m7haRef0WH.jpg\",\n  \"backdropPath\": \"/hqkIcbrOHL86UncnHIsHVcVmzue.jpg\",\n  \"releaseDate\": \"2008-07-18\",\n  \"voteAverage\": 8.5,\n  \"voteCount\": 32000,\n  \"popularity\": 98.5,\n  \"originalLanguage\": \"en\",\n  \"runtime\": 152,\n  \"budget\": 185000000,\n  \"revenue\": 1004934033,\n  \"genres\": [\n    {\n      \"id\": 1,\n      \"tmdbId\": 28,\n      \"name\": \"Action\"\n    }\n  ],\n  \"averageRating\": 8.7,\n  \"totalRatings\": 150\n}"
            }
          ]
        }
      ],
      "description": "Movie management endpoints for browsing and searching movies."
    },
    {
      "name": "Ratings",
      "item": [
        {
          "name": "Create Rating",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has rating data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('rating');",
                  "    pm.expect(jsonData).to.have.property('movie');",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"movieId\": {{movie_id}},\n  \"rating\": {{rating_score}},\n  \"review\": \"{{review_text}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/ratings",
              "host": ["{{base_url}}"],
              "path": ["ratings"]
            },
            "description": "Rate a movie. Requires authentication. Rating must be between 1-10."
          },
          "response": [
            {
              "name": "Rating Created",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"movieId\": 1,\n  \"rating\": 8,\n  \"review\": \"Amazing movie! Christopher Nolan at his best.\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/ratings",
                  "host": ["{{base_url}}"],
                  "path": ["ratings"]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"id\": 1,\n  \"rating\": 8,\n  \"review\": \"Amazing movie! Christopher Nolan at his best.\",\n  \"createdAt\": \"2024-01-20T10:30:00.000Z\",\n  \"updatedAt\": \"2024-01-20T10:30:00.000Z\",\n  \"movie\": {\n    \"id\": 1,\n    \"title\": \"The Dark Knight\"\n  },\n  \"user\": {\n    \"id\": 1,\n    \"username\": \"johndoe\"\n  }\n}"
            }
          ]
        },
        {
          "name": "Get My Ratings",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has ratings data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData).to.have.property('meta');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/ratings/my-ratings?page={{page}}&limit={{limit}}",
              "host": ["{{base_url}}"],
              "path": ["ratings", "my-ratings"],
              "query": [
                {
                  "key": "page",
                  "value": "{{page}}"
                },
                {
                  "key": "limit",
                  "value": "{{limit}}"
                }
              ]
            },
            "description": "Get all ratings by the authenticated user. Requires authentication."
          },
          "response": []
        },
        {
          "name": "Update Rating",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has updated rating\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('rating');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"rating\": {{updated_rating}},\n  \"review\": \"{{updated_review}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/ratings/{{rating_id}}",
              "host": ["{{base_url}}"],
              "path": ["ratings", "{{rating_id}}"]
            },
            "description": "Update an existing rating. Only the rating owner can update it."
          },
          "response": []
        },
        {
          "name": "Delete Rating",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/ratings/{{rating_id}}",
              "host": ["{{base_url}}"],
              "path": ["ratings", "{{rating_id}}"]
            },
            "description": "Delete a rating. Only the rating owner can delete it."
          },
          "response": []
        },
        {
          "name": "Get Movie Ratings",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has ratings data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/ratings/movie/{{movie_id}}",
              "host": ["{{base_url}}"],
              "path": ["ratings", "movie", "{{movie_id}}"]
            },
            "description": "Get all ratings for a specific movie. Public endpoint."
          },
          "response": []
        },
        {
          "name": "Get Movie Average Rating",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has average rating\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('averageRating');",
                  "    pm.expect(jsonData).to.have.property('totalRatings');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/ratings/movie/{{movie_id}}/average",
              "host": ["{{base_url}}"],
              "path": ["ratings", "movie", "{{movie_id}}", "average"]
            },
            "description": "Get the average rating and total number of ratings for a specific movie."
          },
          "response": []
        }
      ],
      "description": "Movie rating endpoints for creating, updating, and managing user ratings."
    },
    {
      "name": "Watchlist",
      "item": [
        {
          "name": "Add to Watchlist",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has watchlist data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('type');",
                  "    pm.expect(jsonData).to.have.property('movie');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"movieId\": {{movie_id}},\n  \"type\": \"{{watchlist_type}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/watchlist",
              "host": ["{{base_url}}"],
              "path": ["watchlist"]
            },
            "description": "Add a movie to user's watchlist or favorites. Type can be 'watchlist' or 'favorites'."
          },
          "response": [
            {
              "name": "Added to Watchlist",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"movieId\": 1,\n  \"type\": \"watchlist\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/watchlist",
                  "host": ["{{base_url}}"],
                  "path": ["watchlist"]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"id\": 1,\n  \"type\": \"watchlist\",\n  \"addedAt\": \"2024-01-20T10:30:00.000Z\",\n  \"movie\": {\n    \"id\": 1,\n    \"title\": \"The Dark Knight\",\n    \"posterPath\": \"/qJ2tW6WMUDux911r6m7haRef0WH.jpg\",\n    \"releaseDate\": \"2008-07-18\",\n    \"voteAverage\": 8.5\n  }\n}"
            }
          ]
        },
        {
          "name": "Get My Watchlist",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has watchlist data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData).to.have.property('meta');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/watchlist?type={{watchlist_type}}&page={{page}}&limit={{limit}}",
              "host": ["{{base_url}}"],
              "path": ["watchlist"],
              "query": [
                {
                  "key": "type",
                  "value": "{{watchlist_type}}",
                  "description": "Filter by type: 'watchlist' or 'favorites'"
                },
                {
                  "key": "page",
                  "value": "{{page}}"
                },
                {
                  "key": "limit",
                  "value": "{{limit}}"
                }
              ]
            },
            "description": "Get user's watchlist and/or favorites with optional filtering."
          },
          "response": []
        },
        {
          "name": "Remove from Watchlist",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/watchlist/{{watchlist_id}}",
              "host": ["{{base_url}}"],
              "path": ["watchlist", "{{watchlist_id}}"]
            },
            "description": "Remove a movie from watchlist/favorites."
          },
          "response": []
        },
        {
          "name": "Get Watchlist Statistics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has statistics\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('totalWatchlist');",
                  "    pm.expect(jsonData).to.have.property('totalFavorites');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/watchlist/stats",
              "host": ["{{base_url}}"],
              "path": ["watchlist", "stats"]
            },
            "description": "Get user's watchlist statistics including counts and genre breakdown."
          },
          "response": []
        },
        {
          "name": "Check Movie in Watchlist",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has check result\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('inWatchlist');",
                  "    pm.expect(jsonData).to.have.property('inFavorites');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/watchlist/check/{{movie_id}}",
              "host": ["{{base_url}}"],
              "path": ["watchlist", "check", "{{movie_id}}"]
            },
            "description": "Check if a movie is in user's watchlist or favorites."
          },
          "response": []
        }
      ],
      "description": "Watchlist and favorites management endpoints."
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-set some common values if not already set",
          "if (!pm.environment.get('base_url')) {",
          "    pm.environment.set('base_url', 'http://localhost:8080/api/v1');",
          "}",
          "",
          "if (!pm.environment.get('page')) {",
          "    pm.environment.set('page', '1');",
          "}",
          "",
          "if (!pm.environment.get('limit')) {",
          "    pm.environment.set('limit', '10');",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test to log response time",
          "pm.test(`Response time is less than 5000ms`, function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "// Log any errors for debugging",
          "if (pm.response.code >= 400) {",
          "    console.log('Error Response:', pm.response.json());",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8080/api/v1",
      "type": "string"
    }
  ]
}
